{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\doctor-manager\\\\sales\\\\src\\\\components\\\\misc\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Tabs from \"./Tabs\";\nimport Block from \"./Block\";\nimport Table from \"./Table\";\nimport GroupBlock from \"./GroupBlock\";\nimport GroupDetails from \"../GroupDetails\";\nimport TableDetail from \"./TableDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = ({\n  group\n}) => {\n  _s();\n  const currentPath = window.location.pathname;\n  const [toggler, setToggler] = useState(false);\n  const [isGroupAdded, setIsGroupAdded] = useState(false);\n  const [fromDate, setFromDate] = useState();\n  const [toDate, setToDate] = useState();\n  const [filterData, setFilterData] = useState([]);\n  const [allGroups, setAllGroups] = useState();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [doctors, setDoctors] = useState([]);\n  const [GroupAllDoctors, setGroupAllDoctor] = useState();\n  const [updateDoctor, setUpdateDoctor] = useState();\n\n  // Extract the string after the last slash (/)\n  const pathSegments = currentPath.split(\"/\");\n  const lastSegment = pathSegments[pathSegments.length - 2];\n  useEffect(() => {}, [allGroups, setAllGroups]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainBg p-5 h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), group ? /*#__PURE__*/_jsxDEV(GroupBlock, {\n      setToggler: setToggler,\n      toggler: toggler,\n      fromDate: fromDate,\n      setFromDate: setFromDate,\n      toDate: toDate,\n      setToDate: setToDate,\n      filterData: filterData,\n      setFilterData: setFilterData,\n      setAllGroups: setAllGroups,\n      allGroups: allGroups,\n      doctors: doctors,\n      setDoctors: setDoctors,\n      isModalOpen: isModalOpen,\n      setIsModalOpen: setIsModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(Block, {\n      isGroupAdded: isGroupAdded,\n      setIsGroupAdded: setIsGroupAdded,\n      isModalOpen: isModalOpen,\n      setIsModalOpen: setIsModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this), lastSegment == \"group-details\" ? /*#__PURE__*/_jsxDEV(TableDetail, {\n      fromDate: fromDate,\n      toDate: toDate,\n      filterData: filterData,\n      setFilterData: setFilterData,\n      setGroupAllDoctor: setGroupAllDoctor,\n      doctors: doctors,\n      setDoctors: setDoctors,\n      isModalOpen: isModalOpen,\n      setIsModalOpen: setIsModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      isGroupAdded: isGroupAdded,\n      setIsGroupAdded: setIsGroupAdded,\n      isModalOpen: isModalOpen,\n      setIsModalOpen: setIsModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"tUgkLgyeDvei0v5rNXjbPsZPAxU=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","Tabs","Block","Table","GroupBlock","GroupDetails","TableDetail","jsxDEV","_jsxDEV","Main","group","_s","currentPath","window","location","pathname","toggler","setToggler","isGroupAdded","setIsGroupAdded","fromDate","setFromDate","toDate","setToDate","filterData","setFilterData","allGroups","setAllGroups","isModalOpen","setIsModalOpen","doctors","setDoctors","GroupAllDoctors","setGroupAllDoctor","updateDoctor","setUpdateDoctor","pathSegments","split","lastSegment","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/laragon/www/doctor-manager/sales/src/components/misc/Main.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Tabs from \"./Tabs\";\r\nimport Block from \"./Block\";\r\nimport Table from \"./Table\";\r\nimport GroupBlock from \"./GroupBlock\";\r\nimport GroupDetails from \"../GroupDetails\";\r\nimport TableDetail from \"./TableDetails\";\r\n\r\nconst Main = ({ group }) => {\r\n  const currentPath = window.location.pathname;\r\n  const [toggler, setToggler] = useState(false);\r\n  const [isGroupAdded, setIsGroupAdded] = useState(false);\r\n  const [fromDate, setFromDate] = useState();\r\n  const [toDate, setToDate] = useState();\r\n  const [filterData, setFilterData] = useState([]);\r\n  const [allGroups, setAllGroups] = useState();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [GroupAllDoctors, setGroupAllDoctor] = useState()\r\n  const [updateDoctor, setUpdateDoctor] = useState();\r\n\r\n  // Extract the string after the last slash (/)\r\n  const pathSegments = currentPath.split(\"/\");\r\n  const lastSegment = pathSegments[pathSegments.length - 2];\r\n\r\n  useEffect(()=>{\r\n  }, [allGroups, setAllGroups])\r\n\r\n\r\n  return (\r\n    <div className=\"mainBg p-5 h-screen\">\r\n      <Navbar />\r\n      <Tabs />\r\n      {group ? <GroupBlock\r\n        setToggler={setToggler}\r\n        toggler={toggler}\r\n        fromDate={fromDate}\r\n        setFromDate={setFromDate}\r\n        toDate={toDate}\r\n        setToDate={setToDate}\r\n        filterData={filterData} setFilterData={setFilterData}\r\n        setAllGroups={setAllGroups}\r\n        allGroups={allGroups}\r\n        doctors={doctors}\r\n        setDoctors={setDoctors}\r\n        isModalOpen={isModalOpen}\r\n        setIsModalOpen={setIsModalOpen}\r\n\r\n      /> : <Block isGroupAdded={isGroupAdded} setIsGroupAdded={setIsGroupAdded} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen}  />}\r\n      {lastSegment == \"group-details\" ? (\r\n        <TableDetail\r\n          fromDate={fromDate}\r\n          toDate={toDate}\r\n          filterData={filterData}\r\n          setFilterData={setFilterData}\r\n          setGroupAllDoctor={setGroupAllDoctor}\r\n          doctors={doctors}\r\n          setDoctors={setDoctors}\r\n          isModalOpen={isModalOpen}\r\n          setIsModalOpen={setIsModalOpen}\r\n        />\r\n      ) : (\r\n        <Table isGroupAdded={isGroupAdded} setIsGroupAdded={setIsGroupAdded} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}