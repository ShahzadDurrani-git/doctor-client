{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\doctor-manager\\\\sales\\\\src\\\\components\\\\misc\\\\SendEmail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport EmailEditor from './EmailEditor';\nimport EmailSender from './EmailSender';\nimport EmailGroupSelector from './EmailGroupSelector';\nimport { sendEmailToGroup } from '../../api/api';\n\n// Import the EmailGroupSelector, EmailEditor, and EmailSender components here.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailComposePage() {\n  _s();\n  const [selectedGroup, setSelectedGroup] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const sendEmail = async () => {\n    try {\n      if (!selectedGroup || !subject || !content) {\n        // You can add some form validation here and display an error message if any field is empty\n        return;\n      }\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'text/html');\n      const extractedText = doc.body.textContent;\n      const response = await sendEmailToGroup(selectedGroup, subject, extractedText);\n      console.log(response);\n    } catch (error) {\n      console.error('Error sending email:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainBg p-5 h-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md sm:rounded-lg flex p-8 flex-wrap gap-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-black-800 text-lg font-semibold border-b border-solid border-black mb-10\",\n          children: \"Compose Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EmailGroupSelector, {\n          selectedGroup: selectedGroup,\n          onSelectGroup: setSelectedGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EmailEditor, {\n          subject: subject,\n          content: content,\n          onSubjectChange: setSubject,\n          onContentChange: setContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EmailSender, {\n          onSendEmail: sendEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailComposePage, \"5XSGVRBG0K+URWp+Ve87X+3R+JU=\");\n_c = EmailComposePage;\nexport default EmailComposePage;\nvar _c;\n$RefreshReg$(_c, \"EmailComposePage\");","map":{"version":3,"names":["React","useState","EmailEditor","EmailSender","EmailGroupSelector","sendEmailToGroup","jsxDEV","_jsxDEV","EmailComposePage","_s","selectedGroup","setSelectedGroup","subject","setSubject","content","setContent","sendEmail","parser","DOMParser","doc","parseFromString","extractedText","body","textContent","response","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelectGroup","onSubjectChange","onContentChange","onSendEmail","_c","$RefreshReg$"],"sources":["C:/laragon/www/doctor-manager/sales/src/components/misc/SendEmail.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport EmailEditor from './EmailEditor';\r\nimport EmailSender from './EmailSender'\r\nimport EmailGroupSelector from './EmailGroupSelector'\r\nimport { sendEmailToGroup } from '../../api/api';\r\n \r\n\r\n// Import the EmailGroupSelector, EmailEditor, and EmailSender components here.\r\n\r\nfunction EmailComposePage() {\r\n  const [selectedGroup, setSelectedGroup] = useState(\"\");\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const sendEmail = async () => {\r\n    try {\r\n      if (!selectedGroup || !subject || !content) {\r\n        // You can add some form validation here and display an error message if any field is empty\r\n        return;\r\n      }\r\n\r\n      const parser = new DOMParser();\r\n      const doc = parser.parseFromString(content, 'text/html');\r\n      const extractedText = doc.body.textContent;\r\n      const response = await sendEmailToGroup(selectedGroup, subject, extractedText);\r\n      console.log(response);\r\n    } catch (error) {\r\n      console.error('Error sending email:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mainBg p-5 h-screen\">\r\n      <div className=\"bg-white shadow-md sm:rounded-lg flex p-8 flex-wrap gap-3\">\r\n    <div className='w-full'>\r\n      <h1 className='text-black-800 text-lg font-semibold border-b border-solid border-black mb-10'>Compose Email</h1>\r\n      <EmailGroupSelector selectedGroup={selectedGroup} onSelectGroup={setSelectedGroup} />\r\n      <EmailEditor subject={subject} content={content} onSubjectChange={setSubject} onContentChange={setContent} />\r\n      <EmailSender onSendEmail={sendEmail} />\r\n    </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmailComposePage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,SAASC,gBAAgB,QAAQ,eAAe;;AAGhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,IAAI,CAACN,aAAa,IAAI,CAACE,OAAO,IAAI,CAACE,OAAO,EAAE;QAC1C;QACA;MACF;MAEA,MAAMG,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;MAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACN,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMO,aAAa,GAAGF,GAAG,CAACG,IAAI,CAACC,WAAW;MAC1C,MAAMC,QAAQ,GAAG,MAAMnB,gBAAgB,CAACK,aAAa,EAAEE,OAAO,EAAES,aAAa,CAAC;MAC9EI,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAClCtB,OAAA;MAAKqB,SAAS,EAAC,2DAA2D;MAAAC,QAAA,eAC5EtB,OAAA;QAAKqB,SAAS,EAAC,QAAQ;QAAAC,QAAA,gBACrBtB,OAAA;UAAIqB,SAAS,EAAC,+EAA+E;UAAAC,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChH1B,OAAA,CAACH,kBAAkB;UAACM,aAAa,EAAEA,aAAc;UAACwB,aAAa,EAAEvB;QAAiB;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrF1B,OAAA,CAACL,WAAW;UAACU,OAAO,EAAEA,OAAQ;UAACE,OAAO,EAAEA,OAAQ;UAACqB,eAAe,EAAEtB,UAAW;UAACuB,eAAe,EAAErB;QAAW;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC7G1B,OAAA,CAACJ,WAAW;UAACkC,WAAW,EAAErB;QAAU;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACxB,EAAA,CAlCQD,gBAAgB;AAAA8B,EAAA,GAAhB9B,gBAAgB;AAoCzB,eAAeA,gBAAgB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}