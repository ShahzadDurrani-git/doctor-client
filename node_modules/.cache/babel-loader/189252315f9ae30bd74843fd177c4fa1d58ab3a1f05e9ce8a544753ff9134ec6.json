{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\doctor-manager\\\\sales\\\\src\\\\components\\\\misc\\\\Modal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { createGroup, getGroupById, updateGroupData } from '../../api/api'; // Import the API functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Modal = ({\n  isGroupAdded,\n  setIsGroupAdded,\n  isModalOpen,\n  setIsModalOpen,\n  updateGroup\n}) => {\n  _s();\n  const [groupName, setGroupName] = useState('');\n  const [description, setDescription] = useState('');\n  const [groupDetails, setGroupDetails] = useState(null);\n  useEffect(() => {\n    if (updateGroup) {\n      // Fetch group details by its ID\n      getGroupById(updateGroup).then(response => {\n        setGroupName(response.data.groupDetails.groupName);\n        setDescription(response.data.groupDetails.description);\n        //   setGroupDetails(response.data.groupDetails); // Update group details state\n        console.log(response.data.groupDetails);\n      }).catch(error => {\n        console.error('Error fetching group details:', error);\n      });\n    }\n  }, [updateGroup]);\n  const handleAddGroup = () => {\n    if (!groupName || !description) {\n      setIsGroupAdded('Error: Group Name and Description cannot be empty');\n      return;\n    }\n    const data = {\n      \"groupName\": groupName,\n      \"description\": description\n    };\n    createGroup(data).then(response => {\n      setIsGroupAdded('Success: Group Created Successfully');\n      setGroupName('');\n      closeModal();\n    }).catch(error => {\n      setIsGroupAdded('Error: Unable to create the group');\n      console.error('Error creating group:', error);\n    });\n  };\n  const handleUpdateGroup = () => {\n    if (!groupName || !description) {\n      setIsGroupAdded('Error: Group Name and Description cannot be empty');\n      return;\n    }\n    const data = {\n      groupName,\n      description\n    };\n\n    // Assuming you have an updateGroup function in your API\n    updateGroup(updateGroup, data) // Replace `groupId` with the actual group ID\n    .then(response => {\n      setIsGroupAdded('Success: Group Updated Successfully');\n      setGroupName('');\n      setDescription('');\n      closeModal();\n    }).catch(error => {\n      setIsGroupAdded('Error: Unable to update the group');\n      console.error('Error updating group:', error);\n    });\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 flex items-center justify-center z-10\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal bg-white p-6 rounded shadow-lg w-[500px] h-[300px]\",\n        style: {\n          margin: '0 auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: closeModal,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Enter Group Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Group Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: groupName,\n                onChange: e => {\n                  setGroupName(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"description\",\n                children: \"Description:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"appearance-none border-0 rounded\",\n                id: \"description\",\n                value: description,\n                onChange: e => setDescription(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions\",\n            children: [updateGroup ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleUpdateGroup,\n              children: \"Update Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleAddGroup,\n              children: \"Save Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 91\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: closeModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Modal, \"eKx8oXbODRaGKHi7fMqOR1iFBUs=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useRef","useState","useEffect","createGroup","getGroupById","updateGroupData","jsxDEV","_jsxDEV","Fragment","_Fragment","Modal","isGroupAdded","setIsGroupAdded","isModalOpen","setIsModalOpen","updateGroup","_s","groupName","setGroupName","description","setDescription","groupDetails","setGroupDetails","then","response","data","console","log","catch","error","handleAddGroup","closeModal","handleUpdateGroup","children","className","style","margin","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","htmlFor","id","_c","$RefreshReg$"],"sources":["C:/laragon/www/doctor-manager/sales/src/components/misc/Modal.jsx"],"sourcesContent":["    import React, { useRef, useState, useEffect } from \"react\";\r\n    \r\nimport { createGroup, getGroupById, updateGroupData } from '../../api/api';  // Import the API functions\r\n\r\n\r\n    const Modal = ({ isGroupAdded, setIsGroupAdded, isModalOpen, setIsModalOpen, updateGroup}) => {\r\n\r\n        const [groupName, setGroupName] = useState('');\r\n        const [description, setDescription] = useState('')\r\n        const [groupDetails, setGroupDetails] = useState(null);\r\n\r\n        useEffect(() => {\r\n            if (updateGroup) {\r\n              // Fetch group details by its ID\r\n              getGroupById(updateGroup)\r\n                .then((response) => {\r\n                    setGroupName(response.data.groupDetails.groupName)\r\n                    setDescription(response.data.groupDetails.description)\r\n                //   setGroupDetails(response.data.groupDetails); // Update group details state\r\n                  console.log(response.data.groupDetails)\r\n                })\r\n                .catch((error) => {\r\n                  console.error('Error fetching group details:', error);\r\n                });\r\n            }\r\n          }, [updateGroup]);\r\n\r\n      const handleAddGroup = () => {\r\n        if (!groupName || !description) {\r\n          setIsGroupAdded('Error: Group Name and Description cannot be empty');\r\n          return;\r\n        }\r\n        const data = {\r\n          \"groupName\": groupName,\r\n          \"description\": description\r\n        }\r\n        createGroup(data)\r\n          .then((response) => {\r\n            setIsGroupAdded('Success: Group Created Successfully');\r\n            setGroupName('');\r\n            closeModal();\r\n          })\r\n          .catch((error) => {\r\n            setIsGroupAdded('Error: Unable to create the group');\r\n            console.error('Error creating group:', error);\r\n          });\r\n      };\r\n\r\n\r\n      const handleUpdateGroup = () => {\r\n        if (!groupName || !description) {\r\n          setIsGroupAdded('Error: Group Name and Description cannot be empty');\r\n          return;\r\n        }\r\n      \r\n        const data = {\r\n          groupName,\r\n          description,\r\n        };\r\n      \r\n        // Assuming you have an updateGroup function in your API\r\n        updateGroup(updateGroup, data) // Replace `groupId` with the actual group ID\r\n          .then((response) => {\r\n            setIsGroupAdded('Success: Group Updated Successfully');\r\n            setGroupName('');\r\n            setDescription('');\r\n            closeModal();\r\n          })\r\n          .catch((error) => {\r\n            setIsGroupAdded('Error: Unable to update the group');\r\n            console.error('Error updating group:', error);\r\n          });\r\n      };\r\n      \r\n\r\n      const closeModal = () => {\r\n        setIsModalOpen(false);\r\n      };\r\n  \r\n\r\n    return (\r\n        <>\r\n        {isModalOpen && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center z-10\">\r\n          <div className=\"modal bg-white p-6 rounded shadow-lg w-[500px] h-[300px]\" style={{ margin: '0 auto' }}>\r\n            <span className=\"close\" onClick={closeModal}>\r\n              &times;\r\n            </span>\r\n            <div className=\"modal-content\">\r\n              <h2>Enter Group Details</h2>\r\n              <div className=\"group-details\">\r\n              <div className=\"mb-4\">\r\n                <label>Group Name:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={groupName}\r\n                  onChange={(e) => {\r\n                    setGroupName(e.target.value);\r\n                  }}\r\n                />\r\n                </div>\r\n                <div className=\"mb-4\">\r\n        <label htmlFor=\"description\">\r\n          Description: \r\n        </label>\r\n        <textarea\r\n          className=\"appearance-none border-0 rounded\"\r\n          id=\"description\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n        />\r\n      </div>\r\n              </div>\r\n              <div className=\"modal-actions\">\r\n                {updateGroup? <button onClick={handleUpdateGroup}>Update Group</button> : <button onClick={handleAddGroup}>Save Group</button>}\r\n                {/* <button onClick={handleAddGroup}>Save Group</button> */}\r\n                <button onClick={closeModal}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n        </>\r\n    );\r\n    };\r\n\r\n    export default Modal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}