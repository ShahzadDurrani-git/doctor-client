{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DeltaInsertOp_1 = require(\"./DeltaInsertOp\");\nvar value_types_1 = require(\"./value-types\");\nvar InsertData_1 = require(\"./InsertData\");\nvar OpAttributeSanitizer_1 = require(\"./OpAttributeSanitizer\");\nvar InsertOpDenormalizer_1 = require(\"./InsertOpDenormalizer\");\nvar OpLinkSanitizer_1 = require(\"./OpLinkSanitizer\");\nvar InsertOpsConverter = function () {\n  function InsertOpsConverter() {}\n  InsertOpsConverter.convert = function (deltaOps, options) {\n    if (!Array.isArray(deltaOps)) {\n      return [];\n    }\n    var denormalizedOps = [].concat.apply([], deltaOps.map(InsertOpDenormalizer_1.InsertOpDenormalizer.denormalize));\n    var results = [];\n    var insertVal, attributes;\n    for (var _i = 0, denormalizedOps_1 = denormalizedOps; _i < denormalizedOps_1.length; _i++) {\n      var op = denormalizedOps_1[_i];\n      if (!op.insert) {\n        continue;\n      }\n      insertVal = InsertOpsConverter.convertInsertVal(op.insert, options);\n      if (!insertVal) {\n        continue;\n      }\n      attributes = OpAttributeSanitizer_1.OpAttributeSanitizer.sanitize(op.attributes, options);\n      results.push(new DeltaInsertOp_1.DeltaInsertOp(insertVal, attributes));\n    }\n    return results;\n  };\n  InsertOpsConverter.convertInsertVal = function (insertPropVal, sanitizeOptions) {\n    if (typeof insertPropVal === 'string') {\n      return new InsertData_1.InsertDataQuill(value_types_1.DataType.Text, insertPropVal);\n    }\n    if (!insertPropVal || typeof insertPropVal !== 'object') {\n      return null;\n    }\n    var keys = Object.keys(insertPropVal);\n    if (!keys.length) {\n      return null;\n    }\n    return value_types_1.DataType.Image in insertPropVal ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Image, OpLinkSanitizer_1.OpLinkSanitizer.sanitize(insertPropVal[value_types_1.DataType.Image] + '', sanitizeOptions)) : value_types_1.DataType.Video in insertPropVal ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Video, OpLinkSanitizer_1.OpLinkSanitizer.sanitize(insertPropVal[value_types_1.DataType.Video] + '', sanitizeOptions)) : value_types_1.DataType.Formula in insertPropVal ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Formula, insertPropVal[value_types_1.DataType.Formula]) : new InsertData_1.InsertDataCustom(keys[0], insertPropVal[keys[0]]);\n  };\n  return InsertOpsConverter;\n}();\nexports.InsertOpsConverter = InsertOpsConverter;","map":{"version":3,"names":["Object","defineProperty","exports","value","DeltaInsertOp_1","require","value_types_1","InsertData_1","OpAttributeSanitizer_1","InsertOpDenormalizer_1","OpLinkSanitizer_1","InsertOpsConverter","convert","deltaOps","options","Array","isArray","denormalizedOps","concat","apply","map","InsertOpDenormalizer","denormalize","results","insertVal","attributes","_i","denormalizedOps_1","length","op","insert","convertInsertVal","OpAttributeSanitizer","sanitize","push","DeltaInsertOp","insertPropVal","sanitizeOptions","InsertDataQuill","DataType","Text","keys","Image","OpLinkSanitizer","Video","Formula","InsertDataCustom"],"sources":["C:/laragon/www/doctor-manager/node_modules/quill-delta-to-html/dist/commonjs/InsertOpsConverter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeltaInsertOp_1 = require(\"./DeltaInsertOp\");\nvar value_types_1 = require(\"./value-types\");\nvar InsertData_1 = require(\"./InsertData\");\nvar OpAttributeSanitizer_1 = require(\"./OpAttributeSanitizer\");\nvar InsertOpDenormalizer_1 = require(\"./InsertOpDenormalizer\");\nvar OpLinkSanitizer_1 = require(\"./OpLinkSanitizer\");\nvar InsertOpsConverter = (function () {\n    function InsertOpsConverter() {\n    }\n    InsertOpsConverter.convert = function (deltaOps, options) {\n        if (!Array.isArray(deltaOps)) {\n            return [];\n        }\n        var denormalizedOps = [].concat.apply([], deltaOps.map(InsertOpDenormalizer_1.InsertOpDenormalizer.denormalize));\n        var results = [];\n        var insertVal, attributes;\n        for (var _i = 0, denormalizedOps_1 = denormalizedOps; _i < denormalizedOps_1.length; _i++) {\n            var op = denormalizedOps_1[_i];\n            if (!op.insert) {\n                continue;\n            }\n            insertVal = InsertOpsConverter.convertInsertVal(op.insert, options);\n            if (!insertVal) {\n                continue;\n            }\n            attributes = OpAttributeSanitizer_1.OpAttributeSanitizer.sanitize(op.attributes, options);\n            results.push(new DeltaInsertOp_1.DeltaInsertOp(insertVal, attributes));\n        }\n        return results;\n    };\n    InsertOpsConverter.convertInsertVal = function (insertPropVal, sanitizeOptions) {\n        if (typeof insertPropVal === 'string') {\n            return new InsertData_1.InsertDataQuill(value_types_1.DataType.Text, insertPropVal);\n        }\n        if (!insertPropVal || typeof insertPropVal !== 'object') {\n            return null;\n        }\n        var keys = Object.keys(insertPropVal);\n        if (!keys.length) {\n            return null;\n        }\n        return value_types_1.DataType.Image in insertPropVal\n            ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Image, OpLinkSanitizer_1.OpLinkSanitizer.sanitize(insertPropVal[value_types_1.DataType.Image] + '', sanitizeOptions))\n            : value_types_1.DataType.Video in insertPropVal\n                ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Video, OpLinkSanitizer_1.OpLinkSanitizer.sanitize(insertPropVal[value_types_1.DataType.Video] + '', sanitizeOptions))\n                : value_types_1.DataType.Formula in insertPropVal\n                    ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Formula, insertPropVal[value_types_1.DataType.Formula])\n                    :\n                        new InsertData_1.InsertDataCustom(keys[0], insertPropVal[keys[0]]);\n    };\n    return InsertOpsConverter;\n}());\nexports.InsertOpsConverter = InsertOpsConverter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}